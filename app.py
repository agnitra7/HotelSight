{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "84d2e67d-7286-4679-ae4b-fc33d079601b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-12-07 10:48:37.968 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\agnit\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "C:\\Users\\agnit\\anaconda3\\Lib\\site-packages\\torchvision\\models\\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "C:\\Users\\agnit\\anaconda3\\Lib\\site-packages\\torchvision\\models\\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.\n",
      "  warnings.warn(msg)\n",
      "C:\\Users\\agnit\\AppData\\Local\\Temp\\ipykernel_29056\\196115018.py:16: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  model.load_state_dict(torch.load(\"data_augmented_resnet28on50.pth\", map_location=DEVICE))\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import torch\n",
    "import torchvision.transforms as transforms\n",
    "from torchvision import models\n",
    "from PIL import Image\n",
    "\n",
    "# Device configuration\n",
    "DEVICE = torch.device(\"mps\" if torch.backends.mps.is_available() else \"cpu\")\n",
    "\n",
    "# Load the trained model\n",
    "@st.cache_resource\n",
    "def load_model():\n",
    "    num_classes = 1062  # Replace with the actual number of classes\n",
    "    model = models.resnet50(pretrained=False)  # Same architecture as used during training\n",
    "    model.fc = torch.nn.Linear(model.fc.in_features, num_classes)  # Modify the FC layer\n",
    "    model.load_state_dict(torch.load(\"data_augmented_resnet28on50.pth\", map_location=DEVICE))\n",
    "    model = model.to(DEVICE)\n",
    "    model.eval()  # Set model to evaluation mode\n",
    "    return model\n",
    "\n",
    "model = load_model()\n",
    "\n",
    "# Mapping from class index to hotel ID (from your training code)\n",
    "index_to_hotel_id = {\n",
    "    0: 123, 1: 456, 2: 789,  # Replace with actual mapping\n",
    "    # Continue for all class indices...\n",
    "}\n",
    "\n",
    "# Define transformations (same as used during training)\n",
    "Transform = transforms.Compose([\n",
    "    transforms.Resize((224, 224)),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))\n",
    "])\n",
    "\n",
    "# Function to predict Top-X hotel IDs for a given image\n",
    "def predict_topX_hotel_ids(image, top_x=5):\n",
    "    # Preprocess the image\n",
    "    image = Transform(image).unsqueeze(0).to(DEVICE)  # Add batch dimension and move to device\n",
    "\n",
    "    # Perform inference\n",
    "    with torch.no_grad():\n",
    "        outputs = model(image)\n",
    "\n",
    "        # Get the top-X predictions\n",
    "        _, predicted_topX = outputs.topk(top_x, dim=1, largest=True, sorted=True)\n",
    "        predicted_topX = predicted_topX.squeeze(0).cpu().numpy()  # Remove batch dimension\n",
    "\n",
    "    # Map the predicted indices to hotel IDs\n",
    "    topX_hotel_ids = [index_to_hotel_id[idx] for idx in predicted_topX]\n",
    "    return topX_hotel_ids\n",
    "\n",
    "# Streamlit UI\n",
    "st.title(\"Hotel Image Classification\")\n",
    "st.write(\"Upload an image, and the model will predict the top 5 hotel IDs.\")\n",
    "\n",
    "# File uploader\n",
    "uploaded_file = st.file_uploader(\"Choose an image...\", type=[\"jpg\", \"jpeg\", \"png\"])\n",
    "\n",
    "if uploaded_file is not None:\n",
    "    # Display the uploaded image\n",
    "    image = Image.open(uploaded_file).convert(\"RGB\")\n",
    "    st.image(image, caption=\"Uploaded Image\", use_column_width=True)\n",
    "    st.write(\"Processing...\")\n",
    "\n",
    "    # Perform prediction\n",
    "    topX_predictions = predict_topX_hotel_ids(image, top_x=5)\n",
    "    \n",
    "    # Display the predictions\n",
    "    st.write(\"### Top 5 Predicted Hotel IDs:\")\n",
    "    for rank, hotel_id in enumerate(topX_predictions, start=1):\n",
    "        st.write(f\"{rank}. Hotel ID: {hotel_id}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8",
   "language": "python",
   "name": "python38"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
